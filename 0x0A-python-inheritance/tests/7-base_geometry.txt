Module ``7-base_geometry``
==========================
Using ``BaseGeomtry``
---------------------


>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

>>> type(bg) is BaseGeometry
True

>>> type(BaseGeometry)
<class 'type'>

>>> isinstance(bg, BaseGeometry)
True

>>> BaseGeometry.integer_validator(bg, "who", 3)

>>> BaseGeometry.integer_validator("who", 0)
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> BaseGeometry.integer_validator("who", 0)
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> BaseGeometry.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 3 required positional arguments: 'self', 'name', and 'value'

>>> BaseGeometry.integer_validator(bg, "who", 0)
Traceback (most recent call last):
ValueError: who must be greater than 0

>>> bg.integer_validator("what", None)
Traceback (most recent call last):
TypeError: what must be an integer

>>> bg.integer_validator("whatevs", 2.3)
Traceback (most recent call last):
TypeError: whatevs must be an integer

>>> bg.integer_validator("my_int", 12)

>>> bg.integer_validator("width", 89)

>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("whatever")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

>>> BaseGeometry.area()
Traceback (most recent call last):
TypeError: area() missing 1 required positional argument: 'self'

>>> BaseGeometry.area(2, 3)
Traceback (most recent call last):
TypeError: area() takes 1 positional argument but 2 were given

>>> BaseGeometry.area(2)
Traceback (most recent call last):
Exception: area() is not implemented

>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
TypeError: name must be an integer

>>> bg.integer_validator("name", 3.0)
Traceback (most recent call last):
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
ValueError: distance must be greater than 0

>>> bg.integer_validator("", 3)

>>> type(bg.integer_validator)
<class 'method'>

>>> type(bg.area)
<class 'method'>

>>> bg.integer_validator("distance", int('NaN'))
Traceback (most recent call last):
ValueError: invalid literal for int() with base 10: 'NaN'

>>> bg.integer_validator("distance", float('NaN'))
Traceback (most recent call last):
TypeError: distance must be an integer

>>> bg.integer_validator("distance", None)
Traceback (most recent call last):
TypeError: distance must be an integer
